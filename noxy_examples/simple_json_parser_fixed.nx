// ============================================
// SIMPLE JSON PARSER EM NOXY - VERSÃO CORRIGIDA
// ============================================
// Versão corrigida que funciona com as limitações de Noxy

print("=== PARSER JSON SIMPLES EM NOXY ===")

// ============================================
// TOKENIZER SIMPLES - USANDO VARIÁVEIS GLOBAIS
// ============================================

// Variáveis globais para o tokenizer para evitar problemas com structs
let tokenizer_input: string = ""
let tokenizer_cursor: int = 0
let tokenizer_length: int = 0

// Função auxiliar para verificar se é dígito
func is_digit_char(ch: string) -> bool
    let ascii: int = ord(ch)
    return ascii >= 48 & ascii <= 57  // '0' to '9'
end

// Função auxiliar para pular espaços
func skip_whitespace() -> void
    while tokenizer_cursor < tokenizer_length do
        let ch: string = tokenizer_input[tokenizer_cursor]
        if ch != " " & ch != "\t" & ch != "\n" & ch != "\r" then
            break
        end
        tokenizer_cursor = tokenizer_cursor + 1
    end
end

// Função para inicializar o tokenizer
func tokenizer_init(text: string) -> void
    tokenizer_input = text
    tokenizer_cursor = 0
    tokenizer_length = strlen(text)
end

// Struct simples para token
struct Token
    value: string,
    type_id: int  // 1=string, 2=number, 3=bool, 4=null, 5=punct, 0=EOF
end

// Função para obter próximo token
func get_next_token() -> Token
    skip_whitespace()
    
    if tokenizer_cursor >= tokenizer_length then
        return Token("EOF", 0)
    end
    
    let current_char: string = tokenizer_input[tokenizer_cursor]
    
    // Verificar caracteres especiais
    if current_char == "{" then
        tokenizer_cursor = tokenizer_cursor + 1
        return Token("{", 5)
    end
    
    if current_char == "}" then
        tokenizer_cursor = tokenizer_cursor + 1
        return Token("}", 5)
    end
    
    if current_char == "[" then
        tokenizer_cursor = tokenizer_cursor + 1
        return Token("[", 5)
    end
    
    if current_char == "]" then
        tokenizer_cursor = tokenizer_cursor + 1
        return Token("]", 5)
    end
    
    if current_char == ":" then
        tokenizer_cursor = tokenizer_cursor + 1
        return Token(":", 5)
    end
    
    if current_char == "," then
        tokenizer_cursor = tokenizer_cursor + 1
        return Token(",", 5)
    end
    
    if current_char == "\"" then
        tokenizer_cursor = tokenizer_cursor + 1
        return Token("\"", 5)
    end
    
    // Verificar números
    if is_digit_char(current_char) then
        let start: int = tokenizer_cursor
        while tokenizer_cursor < tokenizer_length & 
              is_digit_char(tokenizer_input[tokenizer_cursor]) do
            tokenizer_cursor = tokenizer_cursor + 1
        end
        
        // Extrair número (simplificado)
        let num_str: string = ""
        let i: int = start
        while i < tokenizer_cursor do
            num_str = num_str + tokenizer_input[i]
            i = i + 1
        end
        
        return Token(num_str, 2)
    end
    
    // Verificar palavras-chave e strings
    let start: int = tokenizer_cursor
    while tokenizer_cursor < tokenizer_length do
        let ch: string = tokenizer_input[tokenizer_cursor]
        if ch == " " | ch == "\t" | ch == "\n" | ch == "\r" |
           ch == "{" | ch == "}" | ch == "[" | ch == "]" |
           ch == ":" | ch == "," | ch == "\"" then
            break
        end
        tokenizer_cursor = tokenizer_cursor + 1
    end
    
    if tokenizer_cursor > start then
        let word: string = ""
        let i: int = start
        while i < tokenizer_cursor do
            word = word + tokenizer_input[i]
            i = i + 1
        end
        
        // Verificar palavras-chave
        if word == "true" | word == "false" then
            return Token(word, 3)  // bool
        end
        
        if word == "null" then
            return Token(word, 4)  // null
        end
        
        return Token(word, 1)  // string
    end
    
    // Caractere desconhecido
    tokenizer_cursor = tokenizer_cursor + 1
    return Token(current_char, 0)
end

// ============================================
// PARSER SIMPLES - USANDO VARIÁVEL GLOBAL
// ============================================

let current_token: Token = Token("", 0)

func parser_init(input: string) -> void
    tokenizer_init(input)
    current_token = get_next_token()
end

func consume_token(expected: string) -> bool
    if current_token.value == expected then
        current_token = get_next_token()
        return true
    end
    print("Erro: esperava ")
    print(expected)
    print(" mas encontrou ")
    print(current_token.value)
    return false
end

// Funções de parsing simplificadas
func parse_string() -> string
    if !consume_token("\"") then
        return "ERROR"
    end
    
    let content: string = current_token.value
    if current_token.type_id != 1 then
        content = "empty"
    else
        current_token = get_next_token()
    end
    
    if !consume_token("\"") then
        return "ERROR"
    end
    
    return content
end

func parse_number() -> int
    if current_token.type_id != 2 then
        print("Erro: esperava número")
        return -1
    end
    
    // Converter string para int
    let num_str: string = current_token.value
    let result: int = 0
    let i: int = 0
    let len: int = strlen(num_str)
    
    while i < len do
        let digit: string = num_str[i]
        let digit_val: int = ord(digit) - 48  // '0' = 48
        result = result * 10 + digit_val
        i = i + 1
    end
    
    current_token = get_next_token()
    return result
end

func parse_bool() -> bool
    if current_token.type_id != 3 then
        print("Erro: esperava boolean")
        return false
    end
    
    let result: bool = current_token.value == "true"
    current_token = get_next_token()
    return result
end

func parse_null() -> bool
    if current_token.type_id != 4 then
        print("Erro: esperava null")
        return false
    end
    
    current_token = get_next_token()
    return true
end

func parse_array() -> int
    if !consume_token("[") then
        return -1
    end
    
    let count: int = 0
    
    while current_token.value != "]" & current_token.value != "EOF" do
        // Recursão simplificada - apenas conta elementos
        let parsed: bool = parse_value()
        if parsed then
            count = count + 1
        end
        
        if current_token.value == "," then
            consume_token(",")
        end
    end
    
    consume_token("]")
    return count
end

func parse_object() -> int
    if !consume_token("{") then
        return -1
    end
    
    let pairs: int = 0
    
    while current_token.value != "}" & current_token.value != "EOF" do
        // Parse key
        let key: string = parse_string()
        if key == "ERROR" then
            return -1
        end
        
        if !consume_token(":") then
            return -1
        end
        
        // Parse value
        let parsed: bool = parse_value()
        if parsed then
            pairs = pairs + 1
        end
        
        if current_token.value == "," then
            consume_token(",")
        end
    end
    
    consume_token("}")
    return pairs
end

func parse_value() -> bool
    if current_token.value == "\"" then
        let str_val: string = parse_string()
        print("Parsed string: ")
        print(str_val)
        return true
    end
    
    if current_token.type_id == 2 then
        let num_val: int = parse_number()
        print("Parsed number: ")
        print(to_str(num_val))
        return true
    end
    
    if current_token.type_id == 3 then
        let bool_val: bool = parse_bool()
        print("Parsed bool: ")
        if bool_val then
            print("true")
        else
            print("false")
        end
        return true
    end
    
    if current_token.type_id == 4 then
        let null_parsed: bool = parse_null()
        print("Parsed null")
        return null_parsed
    end
    
    if current_token.value == "[" then
        let array_size: int = parse_array()
        print("Parsed array with ")
        print(to_str(array_size))
        print(" elements")
        return array_size >= 0
    end
    
    if current_token.value == "{" then
        let object_pairs: int = parse_object()
        print("Parsed object with ")
        print(to_str(object_pairs))
        print(" pairs")
        return object_pairs >= 0
    end
    
    print("Erro: valor JSON inválido")
    return false
end

// ============================================
// FUNÇÃO PRINCIPAL E TESTES
// ============================================

// Teste 1: String simples
print("Teste 1: String simples")
parser_init("\"hello\"")
parse_value()
print("")

// Teste 2: Número
print("Teste 2: Número")
parser_init("42")
parse_value()
print("")

// Teste 3: Boolean
print("Teste 3: Boolean")
parser_init("true")
parse_value()
print("")

// Teste 4: Null
print("Teste 4: Null")
parser_init("null")
parse_value()
print("")

// Teste 5: Array simples
print("Teste 5: Array simples")
parser_init("[1, 2, 3]")
parse_value()
print("")

// Teste 6: Objeto simples
print("Teste 6: Objeto simples")
parser_init("{\"nome\": \"João\", \"idade\": 30}")
parse_value()
print("")

print("Parser JSON simples concluído!")
