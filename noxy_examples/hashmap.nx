// ============================================
// HASHMAP COM ANINHAMENTO SIMPLIFICADO PARA NOXY
// ============================================

// Estrutura básica para valores (sem tipos complexos)
struct Value
    type: int,           // 1=string, 2=number, 3=boolean, 4=nested_object
    string_val: string,
    number_val: float,
    bool_val: bool,
    nested_index: int    // Índice do hashmap aninhado (-1 se não for aninhado)
end

// Estrutura para par chave-valor
struct Pair
    key: string,
    val: Value
end

// Arrays simples para hashmaps (evitando struct complexos)
let global_keys: string[8] = ["", "", "", "", "", "", "", ""]
let global_values: Value[8] = [
    Value(0, "", 0.0, false, -1),
    Value(0, "", 0.0, false, -1),
    Value(0, "", 0.0, false, -1),
    Value(0, "", 0.0, false, -1),
    Value(0, "", 0.0, false, -1),
    Value(0, "", 0.0, false, -1),
    Value(0, "", 0.0, false, -1),
    Value(0, "", 0.0, false, -1)
]
let global_count: int = 0

// Hashmaps aninhados como arrays separados
let nested_keys_0: string[8] = ["", "", "", "", "", "", "", ""]
let nested_values_0: Value[8] = [
    Value(0, "", 0.0, false, -1),
    Value(0, "", 0.0, false, -1),
    Value(0, "", 0.0, false, -1),
    Value(0, "", 0.0, false, -1),
    Value(0, "", 0.0, false, -1),
    Value(0, "", 0.0, false, -1),
    Value(0, "", 0.0, false, -1),
    Value(0, "", 0.0, false, -1)
]
let nested_count_0: int = 0

let nested_keys_1: string[8] = ["", "", "", "", "", "", "", ""]
let nested_values_1: Value[8] = [
    Value(0, "", 0.0, false, -1),
    Value(0, "", 0.0, false, -1),
    Value(0, "", 0.0, false, -1),
    Value(0, "", 0.0, false, -1),
    Value(0, "", 0.0, false, -1),
    Value(0, "", 0.0, false, -1),
    Value(0, "", 0.0, false, -1),
    Value(0, "", 0.0, false, -1)
]
let nested_count_1: int = 0

// Função para criar um valor string
func make_string(s: string) -> Value
    return Value(1, s, 0.0, false, -1)
end

// Função para criar um valor number
func make_number(n: float) -> Value
    return Value(2, "", n, false, -1)
end

// Função para criar um valor boolean
func make_bool(b: bool) -> Value
    return Value(3, "", 0.0, b, -1)
end

// Função para criar um hashmap aninhado
func create_nested_hashmap() -> int
    if nested_count_0 == 0 then
        return 0
    end
    if nested_count_1 == 0 then
        return 1
    end
    return -1  // Sem espaço disponível
end

// Função para limpar o HashMap global
func clear_hashmap() -> void
    global_count = 0
    nested_count_0 = 0
    nested_count_1 = 0
end

// Função para adicionar ao HashMap global
func put_global(k: string, v: Value) -> void
    if global_count < 8 then
        global_keys[global_count] = k
        global_values[global_count] = v
        global_count = global_count + 1
    end
end

// Função para adicionar valor a um HashMap aninhado
func put_to_nested(index: int, k: string, v: Value) -> void
    if index == 0 & nested_count_0 < 8 then
        nested_keys_0[nested_count_0] = k
        nested_values_0[nested_count_0] = v
        nested_count_0 = nested_count_0 + 1
    end
    if index == 1 & nested_count_1 < 8 then
        nested_keys_1[nested_count_1] = k
        nested_values_1[nested_count_1] = v
        nested_count_1 = nested_count_1 + 1
    end
end

// Função para buscar valor no HashMap global
func get_global(k: string) -> Value
    let i: int = 0
    while i < global_count do
        if global_keys[i] == k then
            return global_values[i]
        end
        i = i + 1
    end
    return Value(0, "", 0.0, false, -1)  // Valor vazio se não encontrado
end

// Função para buscar valor em um HashMap aninhado
func get_from_nested(index: int, k: string) -> Value
    if index == 0 then
        let i: int = 0
        while i < nested_count_0 do
            if nested_keys_0[i] == k then
                return nested_values_0[i]
            end
            i = i + 1
        end
    end
    if index == 1 then
        let i: int = 0
        while i < nested_count_1 do
            if nested_keys_1[i] == k then
                return nested_values_1[i]
            end
            i = i + 1
        end
    end
    return Value(0, "", 0.0, false, -1)  // Valor vazio se não encontrado
end

// Função para imprimir valor (com suporte a aninhamento)
func print_val(v: Value) -> void
    if v.type == 1 then
        print("\"" + v.string_val + "\"")
    end
    if v.type == 2 then
        print(to_str(v.number_val))
    end
    if v.type == 3 then
        if v.bool_val then
            print("true")
        else
            print("false")
        end
    end
    if v.type == 4 then
        if v.nested_index >= 0 then
            print_nested_hashmap(v.nested_index)
        else
            print("{}")
        end
    end
end

// Função para imprimir HashMap aninhado
func print_nested_hashmap(index: int) -> void
    print("{")
    if index == 0 then
        let i: int = 0
        while i < nested_count_0 do
            if i > 0 then
                print(", ")
            end
            print("\"" + nested_keys_0[i] + "\": ")
            print_val(nested_values_0[i])
            i = i + 1
        end
    end
    if index == 1 then
        let i: int = 0
        while i < nested_count_1 do
            if i > 0 then
                print(", ")
            end
            print("\"" + nested_keys_1[i] + "\": ")
            print_val(nested_values_1[i])
            i = i + 1
        end
    end
    print("}")
end

// Função para imprimir o HashMap global
func print_hashmap() -> void
    print("{")
    let i: int = 0
    while i < global_count do
        if i > 0 then
            print(", ")
        end
        print("\"" + global_keys[i] + "\": ")
        print_val(global_values[i])
        i = i + 1
    end
    print("}")
end

// Programa principal
print("=== HASHMAP COM ANINHAMENTO SIMPLIFICADO ===")
print("")

clear_hashmap()
print("HashMap limpo e pronto para uso!")

// Criar um hashmap aninhado para endereço
let endereco_index: int = create_nested_hashmap()
if endereco_index >= 0 then
    put_to_nested(endereco_index, "rua", make_string("Rua das Flores, 123"))
    put_to_nested(endereco_index, "cidade", make_string("São Paulo"))
    put_to_nested(endereco_index, "cep", make_string("01234-567"))
end

// Criar um hashmap aninhado para contato
let contato_index: int = create_nested_hashmap()
if contato_index >= 0 then
    put_to_nested(contato_index, "email", make_string("joao@email.com"))
    put_to_nested(contato_index, "telefone", make_string("11999887766"))
end

// Adicionar valores ao HashMap principal
put_global("nome", make_string("João Silva"))
put_global("idade", make_number(30.0))
put_global("ativo", make_bool(true))
put_global("endereco", Value(4, "", 0.0, false, endereco_index))
put_global("contato", Value(4, "", 0.0, false, contato_index))

print("Valores adicionados com sucesso!")
print("")

// Mostrar o HashMap completo
print("HashMap principal com estruturas aninhadas:")
print_hashmap()
print("")

// Demonstrar acesso a valores aninhados
print("=== ACESSANDO VALORES ANINHADOS ===")
let endereco_val: Value = get_global("endereco")
if endereco_val.type == 4 then
    let rua_val: Value = get_from_nested(endereco_val.nested_index, "rua")
    print("Rua: ")
    print_val(rua_val)
    print("")
    
    let cidade_val: Value = get_from_nested(endereco_val.nested_index, "cidade")
    print("Cidade: ")
    print_val(cidade_val)
    print("")
end

let contato_val: Value = get_global("contato")
if contato_val.type == 4 then
    let email_val: Value = get_from_nested(contato_val.nested_index, "email")
    print("Email: ")
    print_val(email_val)
    print("")
end

print("=== TESTE CONCLUÍDO COM SUCESSO ===")
print("HashMap com aninhamento implementado com sucesso!")
print("Estrutura pronta para uso em parsers JSON complexos!")